service: be-template-service

custom:
    stage: ${opt:stage, "development"}
    region: us-east-1
    arn:
        common: ${self:custom.region}:${aws:accountId}
        global: :${aws:accountId}
    dynamoDb:
        tableName: be-template-${self:custom.stage}
        billingMode: PAY_PER_REQUEST
    s3:
        bucketName: be-template-bucket-${self:custom.stage}
    sqs:
        queueName: be-template-queue-${self:custom.stage}
    common:
        deletionPolicies:
            development: Delete
            default: Retain
        deletionPolicy: ${self:custom.common.deletionPolicies.${self:custom.stage}, self:custom.common.deletionPolicies.default}
    authorizer:
        name: authorizer
        identitySource: method.request.header.Authorization
        type: token
    webpack:
        webpackConfig: ./webpack.config.ts
        excludeFiles: src/**/*.test.ts
        packager: 'yarn'

package:
  individually: true

### PLUGINS

plugins:
    - serverless-webpack
    - serverless-offline

### RESOURCES

resources:
    - ${file(./infrastructure/resources/DB.yml)}
    - ${file(./infrastructure/resources/S3.yml)}
    - ${file(./infrastructure/resources/SQS.yml)}

### PROVIDER

provider:
    name: aws
    runtime: nodejs14.x
    region: ${self:custom.region}
    stage: ${self:custom.stage}
    environment:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        REGION: ${self:custom.region}
        DYNAMODB_TABLE: ${self:custom.dynamoDb.tableName}
        S3_BUCKET_NAME: ${self:custom.s3.bucketName}
        SQS_QUEUE: ${self:custom.sqs.queueName}
        SOME_DOTENV_VAR: ${env:SOME_DOTENV_VAR}
        AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource:
          - arn:aws:dynamodb:${self:custom.arn.common}:table/${self:custom.dynamoDb.tableName}
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource:
          - arn:aws:dynamodb:${self:custom.arn.common}:table/${self:custom.dynamoDb.tableName}/index/GSI1
      - Effect: "Allow"
        Action:
          - sqs:GetQueueUrl
          - sqs:SendMessage
        Resource:
          - Fn::GetAtt:
            - TemplateSQSQueue
            - Arn
      - Effect: "Allow"
        Action:
          - s3:GetObject
          - s3:PutObject
        Resource:
          - Fn::GetAtt:
            - TemplateS3Bucket
            - Arn
      - Effect: "Allow"
        Action:
          - ssm:GetParameter
        Resource:
          - arn:aws:ssm:${self:custom.arn.common}:parameter/be-template/firebase/service-account-key
    tracing:
        apiGateway: true
        lambda: true
    eventBridge:
        useCloudFormation: true
    lambdaHashingVersion: 20201221
    httpApi:
        metrics: true
        authorizers:
            jwtAuthorizer:
                type: jwt
                identitySource: $request.header.Authorization
                issuerUrl: https://securetoken.google.com/fe-template
                audience:
                    - fe-template

configValidationMode: error
variablesResolutionMode: 20210326
useDotenv: true

### FUNCTIONS

functions:
    example:
        handler: src/functions/example/index.default
        events:
            - httpApi:
                path: /api/example
                method: get

    signUp:
        handler: src/functions/signUp/index.default
        environment:
            FIREBASE_SERVICE_ACCOUNT_KEY_PATH: /be-template/firebase/service-account-key
        events:
            - httpApi:
                path: /api/signUp
                method: post

    list:
        handler: src/functions/list/index.default
        events:
            - httpApi:
                path: /api/orders
                method: get
                authorizer:
                    name: jwtAuthorizer


    create:
        handler: src/functions/create/index.default
        events:
            - httpApi:
                path: /api/orders
                method: post
                authorizer:
                    name: jwtAuthorizer

    put:
        handler: src/functions/put/index.default
        events:
            - httpApi:
                path: /api/orders/{orderId}
                method: put
                authorizer:
                    name: jwtAuthorizer

    get:
        handler: src/functions/get/index.default
        events:
            - httpApi:
                path: /api/orders/{orderId}
                method: get
                authorizer:
                    name: jwtAuthorizer

    delete:
        handler: src/functions/delete/index.default
        events:
            - httpApi:
                path: /api/orders/{orderId}
                method: delete
                authorizer:
                    name: jwtAuthorizer

    upload:
        handler: src/functions/upload/index.default
        events:
            - httpApi:
                path: /api/documents/upload
                method: post
                authorizer:
                    name: jwtAuthorizer

    download:
        handler: src/functions/download/index.default
        events:
            - httpApi:
                path: /api/documents/download/{fileId}
                method: get
                authorizer:
                    name: jwtAuthorizer

    cron:
        handler: src/functions/cron/index.handler
        timeout: 30
        events:
            - eventBridge:
                schedule: rate(10 days)

    consumer:
        handler: src/functions/consumer/index.handler
        events:
            - sqs:
                arn:
                    Fn::GetAtt:
                        - TemplateSQSQueue
                        - Arn
